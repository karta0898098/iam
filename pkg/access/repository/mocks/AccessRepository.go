// Code generated by mockery v2.6.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/karta0898098/iam/pkg/access/domain"
	mock "github.com/stretchr/testify/mock"

	model "github.com/karta0898098/iam/pkg/access/repository/model"

	time "time"
)

// AccessRepository is an autogenerated mock type for the AccessRepository type
type AccessRepository struct {
	mock.Mock
}

// CreateUserAccess provides a mock function with given fields: ctx, userID, role
func (_m *AccessRepository) CreateUserAccess(ctx context.Context, userID int64, role []domain.Role) ([]*model.Access, error) {
	ret := _m.Called(ctx, userID, role)

	var r0 []*model.Access
	if rf, ok := ret.Get(0).(func(context.Context, int64, []domain.Role) []*model.Access); ok {
		r0 = rf(ctx, userID, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Access)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, []domain.Role) error); ok {
		r1 = rf(ctx, userID, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUserAccess provides a mock function with given fields: ctx, userID
func (_m *AccessRepository) ListUserAccess(ctx context.Context, userID int64) ([]*model.Access, error) {
	ret := _m.Called(ctx, userID)

	var r0 []*model.Access
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*model.Access); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Access)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreToken provides a mock function with given fields: ctx, tokenType, tokenID, value, ttl
func (_m *AccessRepository) StoreToken(ctx context.Context, tokenType domain.TokenType, tokenID string, value []byte, ttl time.Duration) error {
	ret := _m.Called(ctx, tokenType, tokenID, value, ttl)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.TokenType, string, []byte, time.Duration) error); ok {
		r0 = rf(ctx, tokenType, tokenID, value, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
