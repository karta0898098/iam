// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	service "github.com/karta0898098/iam/pkg/app/identity/service"
	mock "github.com/stretchr/testify/mock"
)

// Middleware is an autogenerated mock type for the Middleware type
type Middleware struct {
	mock.Mock
}

type Middleware_Expecter struct {
	mock *mock.Mock
}

func (_m *Middleware) EXPECT() *Middleware_Expecter {
	return &Middleware_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0
func (_m *Middleware) Execute(_a0 service.IdentityService) service.IdentityService {
	ret := _m.Called(_a0)

	var r0 service.IdentityService
	if rf, ok := ret.Get(0).(func(service.IdentityService) service.IdentityService); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.IdentityService)
		}
	}

	return r0
}

// Middleware_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type Middleware_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 service.IdentityService
func (_e *Middleware_Expecter) Execute(_a0 interface{}) *Middleware_Execute_Call {
	return &Middleware_Execute_Call{Call: _e.mock.On("Execute", _a0)}
}

func (_c *Middleware_Execute_Call) Run(run func(_a0 service.IdentityService)) *Middleware_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(service.IdentityService))
	})
	return _c
}

func (_c *Middleware_Execute_Call) Return(_a0 service.IdentityService) *Middleware_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Middleware_Execute_Call) RunAndReturn(run func(service.IdentityService) service.IdentityService) *Middleware_Execute_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMiddleware interface {
	mock.TestingT
	Cleanup(func())
}

// NewMiddleware creates a new instance of Middleware. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMiddleware(t mockConstructorTestingTNewMiddleware) *Middleware {
	mock := &Middleware{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
