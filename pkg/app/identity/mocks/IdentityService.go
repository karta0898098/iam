// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/karta0898098/iam/pkg/app/identity/entity"
	mock "github.com/stretchr/testify/mock"

	service "github.com/karta0898098/iam/pkg/app/identity/service"
)

// IdentityService is an autogenerated mock type for the IdentityService type
type IdentityService struct {
	mock.Mock
}

type IdentityService_Expecter struct {
	mock *mock.Mock
}

func (_m *IdentityService) EXPECT() *IdentityService_Expecter {
	return &IdentityService_Expecter{mock: &_m.Mock}
}

// Signin provides a mock function with given fields: ctx, username, password, opt
func (_m *IdentityService) Signin(ctx context.Context, username string, password string, opt *service.SigninOption) (*entity.Identity, error) {
	ret := _m.Called(ctx, username, password, opt)

	var r0 *entity.Identity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *service.SigninOption) (*entity.Identity, error)); ok {
		return rf(ctx, username, password, opt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *service.SigninOption) *entity.Identity); ok {
		r0 = rf(ctx, username, password, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Identity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *service.SigninOption) error); ok {
		r1 = rf(ctx, username, password, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IdentityService_Signin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Signin'
type IdentityService_Signin_Call struct {
	*mock.Call
}

// Signin is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - password string
//   - opt *service.SigninOption
func (_e *IdentityService_Expecter) Signin(ctx interface{}, username interface{}, password interface{}, opt interface{}) *IdentityService_Signin_Call {
	return &IdentityService_Signin_Call{Call: _e.mock.On("Signin", ctx, username, password, opt)}
}

func (_c *IdentityService_Signin_Call) Run(run func(ctx context.Context, username string, password string, opt *service.SigninOption)) *IdentityService_Signin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*service.SigninOption))
	})
	return _c
}

func (_c *IdentityService_Signin_Call) Return(identity *entity.Identity, err error) *IdentityService_Signin_Call {
	_c.Call.Return(identity, err)
	return _c
}

func (_c *IdentityService_Signin_Call) RunAndReturn(run func(context.Context, string, string, *service.SigninOption) (*entity.Identity, error)) *IdentityService_Signin_Call {
	_c.Call.Return(run)
	return _c
}

// Signup provides a mock function with given fields: ctx, username, password, opts
func (_m *IdentityService) Signup(ctx context.Context, username string, password string, opts *service.SignupOption) (*entity.Identity, error) {
	ret := _m.Called(ctx, username, password, opts)

	var r0 *entity.Identity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *service.SignupOption) (*entity.Identity, error)); ok {
		return rf(ctx, username, password, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *service.SignupOption) *entity.Identity); ok {
		r0 = rf(ctx, username, password, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Identity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *service.SignupOption) error); ok {
		r1 = rf(ctx, username, password, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IdentityService_Signup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Signup'
type IdentityService_Signup_Call struct {
	*mock.Call
}

// Signup is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - password string
//   - opts *service.SignupOption
func (_e *IdentityService_Expecter) Signup(ctx interface{}, username interface{}, password interface{}, opts interface{}) *IdentityService_Signup_Call {
	return &IdentityService_Signup_Call{Call: _e.mock.On("Signup", ctx, username, password, opts)}
}

func (_c *IdentityService_Signup_Call) Run(run func(ctx context.Context, username string, password string, opts *service.SignupOption)) *IdentityService_Signup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*service.SignupOption))
	})
	return _c
}

func (_c *IdentityService_Signup_Call) Return(identity *entity.Identity, err error) *IdentityService_Signup_Call {
	_c.Call.Return(identity, err)
	return _c
}

func (_c *IdentityService_Signup_Call) RunAndReturn(run func(context.Context, string, string, *service.SignupOption) (*entity.Identity, error)) *IdentityService_Signup_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewIdentityService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIdentityService creates a new instance of IdentityService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIdentityService(t mockConstructorTestingTNewIdentityService) *IdentityService {
	mock := &IdentityService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
