// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	entity "github.com/karta0898098/iam/pkg/app/identity/entity"
	mock "github.com/stretchr/testify/mock"
)

// NewUserOption is an autogenerated mock type for the NewUserOption type
type NewUserOption struct {
	mock.Mock
}

type NewUserOption_Expecter struct {
	mock *mock.Mock
}

func (_m *NewUserOption) EXPECT() *NewUserOption_Expecter {
	return &NewUserOption_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: p
func (_m *NewUserOption) Execute(p *entity.User) error {
	ret := _m.Called(p)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.User) error); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserOption_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type NewUserOption_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - p *entity.User
func (_e *NewUserOption_Expecter) Execute(p interface{}) *NewUserOption_Execute_Call {
	return &NewUserOption_Execute_Call{Call: _e.mock.On("Execute", p)}
}

func (_c *NewUserOption_Execute_Call) Run(run func(p *entity.User)) *NewUserOption_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.User))
	})
	return _c
}

func (_c *NewUserOption_Execute_Call) Return(_a0 error) *NewUserOption_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NewUserOption_Execute_Call) RunAndReturn(run func(*entity.User) error) *NewUserOption_Execute_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewNewUserOption interface {
	mock.TestingT
	Cleanup(func())
}

// NewNewUserOption creates a new instance of NewUserOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNewUserOption(t mockConstructorTestingTNewNewUserOption) *NewUserOption {
	mock := &NewUserOption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
